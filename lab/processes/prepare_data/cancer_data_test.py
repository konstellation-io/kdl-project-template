"""
Unit tests for the functions in lab/processes/prepare_data/cancer_data.py
"""

import os
import shutil
import time
from pathlib import Path

import numpy as np
import pytest
import torch
from pandas import DataFrame, Series

from processes.prepare_data.cancer_data import (load_cancer_data,
                                                load_data_splits,
                                                load_data_splits_as_dataloader,
                                                prepare_cancer_data,
                                                split_data)


@pytest.mark.unittest
class TestCancerDataPreparation:
    """
    Tests for functions that prepare the cancer dataset without having to
    load it from disk.
    """

    def test_load_cancer_data_returns_expected_object_types(self):
        """
        Test the loading of cancer data (directly from sklearn) in correct format
        """
        X, y = load_cancer_data()
        assert isinstance(X, DataFrame)
        assert isinstance(y, Series)

    def test_split_data_returns_expected_objects(self):
        """
        Test that split_data returns the correct number of objects, each with dimensions as expected
        """
        n_samples = 550
        n_features = 30
        array_x = np.random.rand(n_samples, n_features)
        array_y = np.random.randint(low=0, high=2, size=n_samples).reshape(n_samples, 1)

        result = split_data(X=array_x, y=array_y)

        assert (
            len(result) == 6
        ), "Expected split_data to return 6 objects (train/test/split for each of X and y)"

        # Unpack the result and check the dimensions of elements
        x_train, x_val, x_test, y_train, y_val, y_test = result

        for x in [x_train, x_val, x_test]:
            assert x.shape[1] == n_features

        assert sum([x_train.shape[0], x_val.shape[0], x_test.shape[0]]) == n_samples
        assert sum([y_train.shape[0], y_val.shape[0], y_test.shape[0]]) == n_samples

    def test_prepare_cancer_data_saves_npy_arrays(self):
        """
        Test that prepare_cancer_data saves arrays as .npy files
        """

        dir_output = "temp"  # Temporarily save the resulting files generated by running the function

        expected_files = [
            'X_val.npy', 'y_val.npy', 'X_test.npy', 'scaler.joblib', 'y_test.npy', 'X_train.npy', 'y_train.npy'
        ]

        # Before calling prepare_cancer_data, remove the temp folder if it exists (necessary for validity of test)
        if Path(dir_output).is_dir():
            shutil.rmtree(dir_output)

        prepare_cancer_data(dir_output=dir_output)

        files_created = os.listdir(dir_output)

        assert set(expected_files) == set(files_created), \
            f"Expected the files created by prepare_cancer_data to contain the following files: {expected_files}"

        # Cleanup: remove temporary file
        assert dir_output == "temp"  # Prevent catastrophe if changing directory by mistake
        shutil.rmtree(dir_output)


@pytest.mark.unittest
class TestCancerDataLoading:
    """
    Tests for functions that load the cancer dataset from a saved file on disk or S3 store
    """

    def test_load_data_splits_as_npy_array(self, temp_data_dir):
        """
        Test that data splits can be loaded as numpy arrays.
        Note: requires dir_temp populated with .npy files as generated by prepare_cancer_data, prepared by
        test fixture temp_cancer_data_dir (in conftest.py)
        """
        result = load_data_splits(dir_processed=temp_data_dir, as_type="array")
        for array in result:
            assert isinstance(array, np.ndarray)

    def test_load_data_splits_as_torch_tensors(self, temp_data_dir):
        """
        Test that data splits can be loaded as torch tensors.
        Note: requires dir_temp populated with .npy files as generated by prepare_cancer_data, prepared by
        test fixture temp_cancer_data_dir (in conftest.py)
        """
        result = load_data_splits(dir_processed=temp_data_dir, as_type="tensor")
        for tensor in result:
            assert isinstance(tensor, torch.Tensor)

    def test_load_data_splits_as_dataloader(self, temp_data_dir):
        """
        Test that data splits can be loaded as torch DataLoader objects.
        Note: requires dir_temp populated with .npy files as generated by prepare_cancer_data, prepared by
        test fixture temp_cancer_data_dir (in conftest.py)
        """
        result = load_data_splits_as_dataloader(
            dir_processed=temp_data_dir, batch_size=4, n_workers=1
        )
        for loader in result:
            assert isinstance(loader, torch.utils.data.DataLoader)
